version: 0.2

env:
  variables:
    ACCOUNT_ID: 026090548352
    REGION: us-east-1
    FRONTEND_REPO: capstone-frontend
    BACKEND_REPO: capstone-backend
    FRONTEND_DIR: Frontend-ReactJs/event-management-dashboard
    BACKEND_DIR: Backend-Java/Event_Managment
    K8S_MANIFEST_DIR: Kubernetes

phases:
  install:
    runtime-versions:
      nodejs: 18
      java: corretto17
    commands:
      - echo Installing dependencies...
      - yum install -y jq maven docker unzip
    
  pre_build:
    commands:
      - echo Logging into Amazon ECR...
      - export IMAGE_TAG=build-${CODEBUILD_BUILD_NUMBER}
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com

  build:
    commands:
      - echo Building frontend Docker image...
      - docker build -t $FRONTEND_REPO:$IMAGE_TAG $FRONTEND_DIR
      - docker tag $FRONTEND_REPO:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG

      - echo Building backend Docker image...
      - cd $BACKEND_DIR
      - mvn clean package -DskipTests
      - cd -
      - docker build -t $BACKEND_REPO:$IMAGE_TAG $BACKEND_DIR
      - docker tag $BACKEND_REPO:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG

  post_build:
    commands:
      - echo Pushing images to ECR...
      - docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG
      - docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG

      - echo Generating Kubernetes manifests...
      - mkdir -p k8s-out
      - sed "s|IMAGE_PLACEHOLDER|${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG|g" $K8S_MANIFEST_DIR/react-event-deploy.yaml > k8s-out/react-event-deploy.yaml
      - sed "s|IMAGE_PLACEHOLDER|${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG|g" $K8S_MANIFEST_DIR/springboot-deploy.yaml > k8s-out/springboot-deploy.yaml
      - cp $K8S_MANIFEST_DIR/react-event-service.yaml k8s-out/react-event-service.yaml
      - cp $K8S_MANIFEST_DIR/java-springboot-service.yaml k8s-out/java-springboot-service.yaml
      - cp $K8S_MANIFEST_DIR/mysql-deploy.yaml k8s-out/mysql-deploy.yaml
      - cp $K8S_MANIFEST_DIR/mysql-service.yaml k8s-out/mysql-service.yaml
      - cp $K8S_MANIFEST_DIR/pv.yaml k8s-out/pv.yaml
      - cp $K8S_MANIFEST_DIR/pvc.yaml k8s-out/pvc.yaml

artifacts:
  base-directory: k8s-out
  discard-paths: yes
  files:
    - react-event-deploy.yaml
    - springboot-deploy.yaml
    - react-event-service.yaml
    - java-springboot-service.yaml
    - mysql-deploy.yaml
    - mysql-service.yaml
    - pv.yaml
    - pvc.yaml

















# version: 0.2

# env:
#   variables:
#     ACCOUNT_ID: 026090548352
#     REGION: us-east-1
#     FRONTEND_REPO: capstone-frontend
#     BACKEND_REPO: capstone-backend
#     FRONTEND_DIR: Frontend-ReactJs/event-management-dashboard
#     BACKEND_DIR: Backend-Java/Event_Managment
#     K8S_MANIFEST_DIR: Kubernetes

# phases:
#   install:
#     runtime-versions:
#       nodejs: 18
#       java: corretto17
#     commands:
#       - echo Installing dependencies...
#       - yum install -y jq maven docker
#       - echo Installing sonar-scanner...
#       - curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
#       - unzip sonar-scanner.zip
#       - export PATH=$PATH:$PWD/sonar-scanner-4.8.0.2856-linux/bin
#       - sonar-scanner --version  # optional, to verify installation

#   pre_build:
#     commands:
#       - echo Logging into Amazon ECR...
#       - export IMAGE_TAG=build-${CODEBUILD_BUILD_NUMBER}
#       - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
      
      

#   build:
#     commands:
#       - echo Building frontend Docker image...
#       - docker build -t $FRONTEND_REPO:$IMAGE_TAG $FRONTEND_DIR
#       - docker tag $FRONTEND_REPO:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG

#       - echo Building backend Docker image...
#       - cd $BACKEND_DIR && mvn clean package -DskipTests && cd -
#       - docker build -t $BACKEND_REPO:$IMAGE_TAG $BACKEND_DIR
#       - docker tag $BACKEND_REPO:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG

#   post_build:
#     commands:
#       - echo Pushing images to ECR...
#       - docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG
#       - docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG

#       - echo Generating Kubernetes manifests...
#       - mkdir -p k8s-out
#       - sed "s|IMAGE_PLACEHOLDER|${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG|g" $K8S_MANIFEST_DIR/react-event-deploy.yaml > k8s-out/react-event-deploy.yaml
#       - sed "s|IMAGE_PLACEHOLDER|${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG|g" $K8S_MANIFEST_DIR/springboot-deploy.yaml > k8s-out/springboot-deploy.yaml
#       - cp $K8S_MANIFEST_DIR/react-event-service.yaml k8s-out/react-event-service.yaml
#       - cp $K8S_MANIFEST_DIR/java-springboot-service.yaml k8s-out/java-springboot-service.yaml
#       - cp $K8S_MANIFEST_DIR/mysql-deploy.yaml k8s-out/mysql-deploy.yaml
#       - cp $K8S_MANIFEST_DIR/mysql-service.yaml k8s-out/mysql-service.yaml
#       - cp $K8S_MANIFEST_DIR/pv.yaml k8s-out/pv.yaml
#       - cp $K8S_MANIFEST_DIR/pvc.yaml k8s-out/pvc.yaml

# artifacts:
#   base-directory: k8s-out
#   discard-paths: yes
#   files:
#     - react-event-deploy.yaml
#     - springboot-deploy.yaml
#     - react-event-service.yaml
#     - java-springboot-service.yaml
#     - mysql-deploy.yaml
#     - mysql-service.yaml
#     - pv.yaml
#     - pvc.yaml
